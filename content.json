{"meta":{"title":"Jngoogle","subtitle":"interesting","description":null,"author":"Jngoogle","url":"https://jngoogle.github.io"},"pages":[{},{}],"posts":[{"title":"Retrofit + RxJava 从入门到跑路（Rxjava介绍）","date":"2016-12-26T06:15:46.000Z","path":"2016/12/26/Retrofit-RxJava-从入门到跑路（Rxjava介绍）/","text":"本文较长建议在电脑上阅读(文中除 RxJava + Retrofit 结合运用部分，其余代码示例来自 扔物线 博客) 2016年也差不多要结束了，作为一个Android小白今年学到的东西回头来看发现还是太少了。给我印象最深的是 MVP设计模式、Retrofit以及RxJava。这篇文章就来讲一下Retrofit和RxJava。 网上有很多这两者相关的资料但是结合起来的文章比较少，本着我们学习的目的是为了真正在工作项目中使用，所以决定写下这篇文章，本人由于工作经验较少文中出现错误了希望大家指出纠正。 这里我要先分开讲两者然后再结合起来，只有分开弄清楚了才能在结合的时候运用自如。 ​RxJava首先强烈推荐 扔物线 大大的这篇文章 《给 Android 开发者的 RxJava 详解》 毫不夸张的说，如果真正吃透了这篇文章肯定是能够理解并使用RxJava了（这篇文章较长，系统的介绍了RxJava）。 本人也是看了许多RxJava的文章最终发现了这篇文章才对RxJava形成了一个相对清楚的认识和理解。这里我就用我自己的理解在来梳理一下RxJava。 为什么要用Rxjava，以及什么场景下使用 a library for composing asynchronous and event-based programs by using observable sequences.— from Rxjava github 通过使用可观察序列来组成异步和基于事件的程序的库。 异步 + 简洁 是Rxjava的关键词 。 在需要处理异步的场景下使用：Rxjava的本质还是为了处理异步这件事。 因为Rxjava处理逻辑的十分简洁 ，采用了链式的组织方式使得方便拼接来处理复杂的逻辑。 介绍观察者模式因为Rxjava在处理异步问题的时候采用的是 观察者模式。我们首先来熟悉一下观察者模式。其实对于Android日常开发中我们已经非常熟练的去使用了观察者模式了。我们都使用过Button，写过Button的点击事件。 名词解释（熟悉自行跳过直接看 代码实现 ） 所谓的 观察者模式 也可以称为 注册-订阅模式，就拿当下十分流行的直播来类比一下。比如我很喜欢B站的一位阿婆主（咦，好像暴露了什么）。她的每次直播我都想看，假设阿婆主直播的时间不是固定的，那我很有可能错过直播那我应该怎么做才能解决这个问题呢？ 两种方式： 阿婆主每次直播的时候自己主动通知我（我觉得只有可能我在阿婆主的粉丝群里或者就我一个观众 233才可能这样） 我在B站上关注了阿婆主。注意噢，这里的关注就是意味着订阅了，也就是说只要阿婆主有直播我就能收到通知。 至此我想你应该懂了什么叫 注册-订阅（观察者）模式了，就是说只要我订阅了某个事件源（阿婆主开直播），当事件发生时我就能收到通知。好，我们接下来用一张表来更加清晰的看看这个模式的各个部分组成。 观察者（事件处理者） 被观察者（搞事者） 订阅 我 阿婆主 关注阿婆主这个动作 现在的直播都是采用观察者模式的，好处就是在于无论阿婆主有多少粉丝只要你关注（订阅）了阿婆主，当阿婆主开直播了，这个事件消息能够发送给所有订阅了的粉丝。也就是不需要阿婆主每一个人去挨个通知了。 我们现在再回到开头的提到的Button的这个事情。我们换一种说法可以把观察者模式理解成为监听模式。关注阿婆主之后就好像放置了一个监听器一直在监听阿婆主是否开播这个事件。一旦阿婆主开播事件被触发监听器就启动，然后执行相应的处理（观看直播 or 给阿婆主刷刷礼物）。 所以看到这里写Android的小伙伴是不是觉得监听器有点熟悉，这个在Button上监听它被点击了的监听器不就是OnClickListener吗？当Button（被观察者 or 事件源）被点击之后，OnClickListener（观察者 or 事件处理者）就开始执行相应的操作，可能是跳转Activity也可能是弹出dialog等等。那这个监听器是在哪里订阅或者说关注了Button的一举一动的呢？当然就是在你经常写的 btn.setOnClickListener()的时候啦。在这个时候Button已经被OnClickListener所关注了。 Observer 观察者（事件处理者） Observable 被观察者（搞事者） Subscribe 订阅 我 阿婆主 关注阿婆主这个动作 OnClickListener 监听器 Button 按钮 setOnClickListener 绑定监听 好的，啰嗦了这么多我为什么要介绍这个观察者模式呢？ 是因为我们Rxjava就是要处理异步问题的，异步一般来说那个不在主线程中的任务会比较耗时，为了防止ANR就会用到观察者模式。观察者不用时时刻刻去查看是否需要更新View了（如果那样好累的说）只要我关注了我需要关注的事件源（比如Button的点击事件）就可以在发生了特定事件的时候获得消息然后再更新View。 代码实现. 0 如何引入Rxjava Example for Gradle: 12345// in your modules' build.gradle // Rxjava compile 'com.squareup.retrofit2:adapter-rxjava:2.0.2' // RXandroid compile 'io.reactivex:rxandroid:1.0.1' 1 创建观察者（事件处理者）Observer观察者决定了当事件被触发了做出怎样的回应（在onNext 方法中处理）。 123456789101112131415Observer&lt;String&gt; observer = new Observer&lt;String&gt;() &#123; @Override public void onNext(String s) &#123; Log.d(tag, \"Item: \" + s); &#125; @Override public void onCompleted() &#123; Log.d(tag, \"Completed!\"); &#125; @Override public void onError(Throwable e) &#123; Log.d(tag, \"Error!\"); &#125;&#125;; ​ 首先说明我们在实际的开发中一般创建观察者的时候使用的并不是Observer而是Subscriber。Observer正如其字面的意思就是观察者，是一个接口里面的接口方法就是上面的三个方法，onNext() onCompleted() onError() 。而在实际开发中使用到的Subscriber是什么呢？通过查看源码 public abstract class Subscriber implements Observer, Subscription ，原来Subscriber是一个抽象类它实现了 Observer 和 Sbuscription 这两个接口。 Observer — onNext() onCompleted() onError() subscription — unsubscribe() isUnsubscribed() 其实Subscriber的用法跟Observer用法基本一致，相比于Observer多了一些重写方法,从表格中可以看出多了unsubscribe() 和 isUnsubscribed() 这两个方法。 新增的这两个接口方法有着重要的意义，unsubscribe() 用于取消订阅。恩，既然我可以关注一个阿婆主当然也能够取消关注嘛。这个方法一般是在 onStop() 或者 onPause() 中去实现，取消订阅释放内存防止内存泄漏。阿婆主我取消对你关注了你不可能还死皮赖脸的缠着不放吧 233 。 下面是 subscribe的创建（其实基本都是一样的）。 123456789101112131415161718Subscriber&lt;String&gt; subscriber = new Subscriber&lt;String&gt;() &#123; @Override public void onNext(String s) &#123; Log.d(tag, \"Item: \" + s); &#125; @Override public void onCompleted() &#123; Log.d(tag, \"Completed!\"); &#125; @Override public void onError(Throwable e) &#123; Log.d(tag, \"Error!\"); &#125;&#125;; 2 创建被观察者（搞事者）Observable Observable决定了发送什么事件以及何时发送时间即 what &amp; when。 12345678Observable observable = Observable.create(new Observable.OnSubscribe&lt;String&gt;() &#123; @Override public void call(Subscriber&lt;? super String&gt; subscriber) &#123; subscriber.onNext(\"Hello\"); subscriber.onNext(\"World\"); subscriber.onCompleted(); &#125;&#125;); 我们从上面的简单例子可以看到不管是观察者还是被观察者处理的数据类型都是基本的String类型。在真实的项目开发中，我们在使用Rxjava + Retrofit 的时候要处理的类型往往是通过服务器给定的，通常事先是不知道的。这就需要我们在类型的地方使用泛型来处理，这里只是简单的示例。 除了可以使用 create来创建一个被观察者还可以使用just 和 from， 而这些都被称作操作符，大家可以去这里 了解一下。 3 订阅Subscribe 只要在 Observable中订阅一下，将Observe与其连接起来就是完成订阅了。 举例说明一下： 由指定的一个 drawable 文件 id drawableRes 取得图片，并显示在 ImageView 中，并在出现异常的时候打印 Toast 报错： 123456789101112131415161718192021222324int drawableRes = ...;ImageView imageView = ...;Observable.create(new OnSubscribe&lt;Drawable&gt;() &#123; @Override public void call(Subscriber&lt;? super Drawable&gt; subscriber) &#123; Drawable drawable = getTheme().getDrawable(drawableRes)); subscriber.onNext(drawable); subscriber.onCompleted(); &#125;&#125;).subscribe(new Observer&lt;Drawable&gt;() &#123; @Override public void onNext(Drawable drawable) &#123; imageView.setImageDrawable(drawable); &#125; @Override public void onCompleted() &#123; &#125; @Override public void onError(Throwable e) &#123; Toast.makeText(activity, \"Error!\", Toast.LENGTH_SHORT).show(); &#125;&#125;); 好，至此我们已经看到了整个观察者模式一个完整的流程了即创建 Observable 和 Observe 然后通过 Subscribe 连接两者即可。 真正的使用Rxjava在上面一节 介绍观察者模式中我们提出来完整的流程，我们也就基本的了解了Rxjava的工作流程，但是这不是Rxjava真正的使用方式！ 因为我们使用Rxjava的最初目的还是处理 异步问题。而目前为止所看到的所有代码都是在同一个线程中执行的，所以并不是Rxjava真正的使用方式。接下来，我们就要在不同的线程之间去使用Rxjava。 为了在不同的线程中去使用Rxjava这就表明我们需要线程切换。我在A线程做一件事情，然后切换到B线程去做另外一件事情。刚好Rxjava提供了调度器，它可以用来切换线程。在Rxjava中使用Schedulars — 调度器来切换线程。该调度器已经默认提供了一些线程可供我们使用。 方法名 描述 immediate() 在当前线程中执行(缺省模式) computation() 计算所使用的 Scheduler。这个计算指的是 CPU 密集型计算，即不会被 I/O 等操作限制性能的操作，例如图形的计算。这个 Scheduler 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 computation() 中，否则 I/O 操作的等待时间会浪费 CPU。 io() I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程 newThread() 总是创建新的线程，并在新的线程中执行 mainThread() Android中的主线程 一般在实际的项目中用到最多的就是 io newThread 以及 mainThread 这三个线程。在被观察者中 Observable提供了 两个方式分别是 subscribeOn() 和 observeOn() 来指定观察者和被观察者分别运行在哪个线程。 举例说明： 1234567891011ServiceManager.getInstance() .getMovieService() .getMovie(0, 10) .subscribeOn(Schedulers.newThread()) .observeOn(AndroidSchedulers.mainThread()) .subscribe(new MySubscriber&lt;ApiResult&lt;Subject&gt;&gt;(context) &#123; @Override public void onNext(ApiResult&lt;Subject&gt; subjectApiResult) &#123; // do something &#125; &#125;); 从这个例子上我们可以看到 观察者是运行在新的线程上而 被观察者则是运行在主线程上。注意看在subscribeOn() 的前一句是获取电影的相关信息 getMovie()， 而获取这个信息需要的时间可能较长且不确定所以放在了另外一个新的线程中去执行你可以说实在后台线程执行。最后得到数据之后在再主线程中进行相应的处理。（这里已经是使用了Rxjava + Retrofit） Rxjava是如此的灵活如果你能看到这里非常感谢，以上的内容都是介绍和解释了Rxjava 是如何处理异步问题。还记得文章最开头提到的Rxjava的两个关键词吗？ 异步 + 简洁， 这一节就要介绍Rxjava为什么相比于其他处理异步问题的方式为什么简洁、灵活。 我们先来说说什么样的逻辑是容易被理解的。我个人认为直的逻辑，换句话说不需要考虑各种分支各种例外情况或者是多层关系的逻辑是容易被理解的（层级、依赖、分支较少的逻辑我认为就是直的逻辑）。好比路线，一条直路就能到达目的地当时给人的感觉是清晰、简单的。恰好，Rxjava就是这种链式的一条直的逻辑。依靠着众多 操作符 能够非常方便的实现拼积木的感觉（多了直接扔掉，少了直接加上就好不用考虑依赖、层级之间的关系）。 举例演示一下（注意这里Rxjava和Retrofit结合在使用） 1234567891011121314151617181920212223ServiceManager.getInstance() .getMovieService() .getMovie(0, 10) .flatMap(new Func1&lt;ApiResult&lt;Subject&gt;, Observable&lt;Subject&gt;&gt;() &#123; @Override public Observable&lt;Subject&gt; call(ApiResult&lt;Subject&gt; subjectApiResult) &#123; return Observable.from(subjectApiResult.getSubjects()); &#125; &#125;) .map(new Func1&lt;Subject, String&gt;() &#123; @Override public String call(Subject subject) &#123; return subject.getTitle(); &#125; &#125;) .subscribeOn(Schedulers.io()) .observeOn(AndroidSchedulers.mainThread()) .subscribe(new MySubscriber&lt;String&gt;(context) &#123; @Override public void onNext(String s) &#123; apiResultTv.setText(s); &#125; &#125;); ok,对于刚刚接触Rxjava的人可能一下子会觉得真正使用Rxjava是这么的麻烦，看着代码好像很多逻辑反而不清晰呢。其实这只是由于新接触Rxjava被表面的代码书写格式所吓到了而已。下面来分析一下这一串代码，首先介绍一下背景： 我通过豆瓣电影API得到电影Top250 的相关信息，然后在手机上显示出来更新UI。 豆瓣电影API可以在 这里查看 ，此处代码使用的是 榜单 Top250 这个接口(json返回结果较复杂请耐心分析)。在chrome浏览器中下载 postman 然后输入 https://api.douban.com/v2/movie/top250?start=0&amp;count=10 查看json返回结果。 我们来分析代码，首先通过getMovie() 得到了API所返回的json结果。这里根据提供的json结果返回的格式是 Observable &lt; ApiResult&lt; Subject&gt;&gt; 是一个被观察者Observable （这里真实的场景就是我们通过网络就得到了被观察者而不是自己去创建），然后我们开始多次使用操作符来对这个最原始的 json返回结果进行剥离只留下我们需要的数据，比如这里我只需要榜单中电影的名字。 第一次我们使用了 flatmap 得到了subject ， 然后我们再使用了 map 得到了String 这个对应着电影的名字。此时被观察者所发出的事件中的数据由 Observable &lt; ApiResult&lt; Subject&gt;&gt; 变成了 String 。至此被观察者的事情就处理好了事件源返回了我们想要的那一部分的数据。接下来分别使用 subscribeOn 和 observeOn 来分别指定这些任务应该运行在哪个线程。显然我们指定了观察者的任务处理在 io 线程， 被观察者是运行在主线程中的。最后的最后，我们进行了关注 - 订阅 告诉观察者如果你收到了被观察者的事件通知应该做点什么（setText 更新了UI）。 好，如果你再结合上lambda 表达式的话，代码会看起来更清爽（但是个人不推荐）。 12345678910111213ServiceManager.getInstance() .getMovieService() .getMovie(0, 10) .flatMap(subjectApiResult -&gt; Observable.from(subjectApiResult.getSubjects())) .map(subject -&gt; subject.getTitle()) .subscribeOn(Schedulers.io()) .observeOn(AndroidSchedulers.mainThread()) .subscribe(new MySubscriber&lt;String&gt;(context) &#123; @Override public void onNext(String s) &#123; apiResultTv.setText(s); &#125; &#125;); 总结一下：其实整个这一串代码就是链式下来的一个直的逻辑。 得到API返回结果 getMovie() 转化得到的结果为Subject flatMap() 转化得到的结果为String map() 指定线程 observeOn() subscribeOn() 订阅 subscribe() Rxjava 之所以说它灵活是因为在转化的过程中你想怎么转化都是可以的，它可以通过多种操作符来适应你的各种筛选要求。之后会用一篇文章介绍一下常用的一些操作符。 ​后记终于告一段落了，Rxjava 的基本介绍就这么多了，希望这边文章能给你们一点点帮助。本文中除了 Rxjava 与 Retrofit结合的代码是原创，剩下的示例代码来自 扔物线。还有如果想了解一下 lambda 表达式的同学可以去 这里学习 特别感谢 饭窝 扔物线 ​","raw":"---\ntitle: Retrofit + RxJava 从入门到跑路（Rxjava介绍）\ndate: 2016-12-26 14:15:46\ntags: Android\ncategories: Android\n---\n\n> 本文较长建议在电脑上阅读(文中除 RxJava + Retrofit 结合运用部分，其余代码示例来自 扔物线 博客)\n\n2016年也差不多要结束了，作为一个Android小白今年学到的东西回头来看发现还是太少了。给我印象最深的是 MVP设计模式、Retrofit以及RxJava。这篇文章就来讲一下Retrofit和RxJava。\n\n网上有很多这两者相关的资料但是结合起来的文章比较少，本着我们学习的目的是为了真正在工作项目中使用，所以决定写下这篇文章，本人由于工作经验较少文中出现错误了希望大家指出纠正。\n\n这里我要先分开讲两者然后再结合起来，只有分开弄清楚了才能在结合的时候运用自如。\n\n# ​RxJava\n\n首先强烈推荐 [扔物线](https://github.com/rengwuxian) 大大的这篇文章 [ 《给 Android 开发者的 RxJava 详解》](http://gank.io/post/560e15be2dca930e00da1083) 毫不夸张的说，如果真正吃透了这篇文章肯定是能够理解并使用RxJava了（这篇文章较长，系统的介绍了RxJava）。\n\n本人也是看了许多RxJava的文章最终发现了这篇文章才对RxJava形成了一个相对清楚的认识和理解。这里我就用我自己的理解在来梳理一下RxJava。\n\n### 为什么要用Rxjava，以及什么场景下使用\n\n> a library for composing asynchronous and event-based programs by using observable sequences.--- from Rxjava github\n>\n> 通过使用可观察序列来组成异步和基于事件的程序的库。\n\n异步 + 简洁  是Rxjava的关键词 。\n\n- 在需要处理异步的场景下使用：Rxjava的本质还是为了处理异步这件事。\n- 因为Rxjava处理逻辑的十分简洁 ，采用了链式的组织方式使得方便拼接来处理复杂的逻辑。\n\n\n\n### 介绍观察者模式\n\n因为Rxjava在处理异步问题的时候采用的是 观察者模式。我们首先来熟悉一下观察者模式。其实对于Android日常开发中我们已经非常熟练的去使用了观察者模式了。我们都使用过Button，写过Button的点击事件。\n\n- **名词解释**（熟悉自行跳过直接看 `代码实现` ）\n\n所谓的 观察者模式 也可以称为 注册-订阅模式，就拿当下十分流行的直播来类比一下。比如我很喜欢B站的一位阿婆主（咦，好像暴露了什么）。她的每次直播我都想看，假设阿婆主直播的时间不是固定的，那我很有可能错过直播那我应该怎么做才能解决这个问题呢？\n\n两种方式：\n\n1.  阿婆主每次直播的时候自己主动通知我（我觉得只有可能我在阿婆主的粉丝群里或者就我一个观众 233才可能这样）\n2.  我在B站上关注了阿婆主。注意噢，这里的关注就是意味着订阅了，也就是说只要阿婆主有直播我就能收到通知。\n\n至此我想你应该懂了什么叫 注册-订阅（观察者）模式了，就是说只要我订阅了某个事件源（阿婆主开直播），当事件发生时我就能收到通知。好，我们接下来用一张表来更加清晰的看看这个模式的各个部分组成。\n\n| 观察者（事件处理者） | 被观察者（搞事者） | 订阅        |\n| ---------- | :-------- | :-------- |\n| 我          | 阿婆主       | 关注阿婆主这个动作 |\n\n现在的直播都是采用观察者模式的，好处就是在于无论阿婆主有多少粉丝只要你关注（订阅）了阿婆主，当阿婆主开直播了，这个事件消息能够发送给所有订阅了的粉丝。也就是不需要阿婆主每一个人去挨个通知了。\n\n我们现在再回到开头的提到的Button的这个事情。我们换一种说法可以把观察者模式理解成为监听模式。关注阿婆主之后就好像放置了一个监听器一直在监听阿婆主是否开播这个事件。一旦阿婆主开播事件被触发监听器就启动，然后执行相应的处理（观看直播 or 给阿婆主刷刷礼物）。\n\n所以看到这里写Android的小伙伴是不是觉得监听器有点熟悉，这个在Button上监听它被点击了的监听器不就是OnClickListener吗？当Button（被观察者 or 事件源）被点击之后，OnClickListener（观察者 or 事件处理者）就开始执行相应的操作，可能是跳转Activity也可能是弹出dialog等等。那这个监听器是在哪里订阅或者说关注了Button的一举一动的呢？当然就是在你经常写的 `btn.setOnClickListener()`的时候啦。在这个时候Button已经被OnClickListener所关注了。\n\n| Observer  观察者（事件处理者）  | Observable  被观察者（搞事者） | Subscribe  订阅             |\n| :-------------------- | --------------------- | ------------------------- |\n| 我                     | 阿婆主                   | 关注阿婆主这个动作                 |\n| OnClickListener   监听器 | Button   按钮           | setOnClickListener   绑定监听 |\n\n好的，啰嗦了这么多我为什么要介绍这个观察者模式呢？ 是因为我们Rxjava就是要处理异步问题的，异步一般来说那个不在主线程中的任务会比较耗时，为了防止ANR就会用到观察者模式。观察者不用时时刻刻去查看是否需要更新View了（如果那样好累的说）只要我关注了我需要关注的事件源（比如Button的点击事件）就可以在发生了特定事件的时候获得消息然后再更新View。\n\n- **代码实现**.\n\n  **0 如何引入Rxjava**\n\n  Example for Gradle:\n\n  ```java\n  \t// in your modules' build.gradle\n      // Rxjava\n      compile 'com.squareup.retrofit2:adapter-rxjava:2.0.2'\n      // RXandroid\n      compile 'io.reactivex:rxandroid:1.0.1'\n  ```\n\n  **1 创建观察者（事件处理者）Observer**\n  观察者决定了当事件被触发了做出怎样的回应（在onNext 方法中处理）。  \n\n  ```java\n  Observer<String> observer = new Observer<String>() {\n      @Override\n      public void onNext(String s) {\n          Log.d(tag, \"Item: \" + s);\n      }\n   \n      @Override\n      public void onCompleted() {\n          Log.d(tag, \"Completed!\");\n      }\n   \n      @Override\n      public void onError(Throwable e) {\n          Log.d(tag, \"Error!\");\n      }};\n  ```\n\n  ​\n\n  首先说明我们在实际的开发中一般创建观察者的时候使用的并不是Observer而是Subscriber。\n  Observer正如其字面的意思就是观察者，是一个接口里面的接口方法就是上面的三个方法，onNext()  onCompleted()  onError() 。而在实际开发中使用到的Subscriber是什么呢？\n  通过查看源码 public abstract class Subscriber<T> implements Observer<T>, Subscription ，原来Subscriber是一个抽象类它实现了 Observer 和 Sbuscription 这两个接口。\n\n  - Observer  --- onNext()   onCompleted()  onError()\n  - subscription --- unsubscribe()  isUnsubscribed()\n\n其实Subscriber的用法跟Observer用法基本一致，相比于Observer多了一些重写方法,从表格中可以看出多了`unsubscribe()` 和 `isUnsubscribed()` 这两个方法。\n\n> 新增的这两个接口方法有着重要的意义，`unsubscribe()` 用于取消订阅。恩，既然我可以关注一个阿婆主当然也能够取消关注嘛。这个方法一般是在 onStop() 或者 onPause() 中去实现，取消订阅释放内存防止内存泄漏。阿婆主我取消对你关注了你不可能还死皮赖脸的缠着不放吧 233 。\n\n下面是 subscribe的创建（其实基本都是一样的）。\n\n```java\nSubscriber<String> subscriber = new Subscriber<String>() {\n    \n@Override\n    public void onNext(String s) {\n        Log.d(tag, \"Item: \" + s);\n    }\n \n    \n@Override\n    public void onCompleted() {\n        Log.d(tag, \"Completed!\");\n    }\n \n    \n@Override\n    public void onError(Throwable e) {\n        Log.d(tag, \"Error!\");\n    }};\n```\n\n**2 创建被观察者（搞事者）Observable**\n\nObservable决定了发送什么事件以及何时发送时间即 what & when。\n\n```java\nObservable observable = Observable.create(new Observable.OnSubscribe<String>() {\n    \n@Override\n    public void call(Subscriber<? super String> subscriber) {\n        subscriber.onNext(\"Hello\");\n        subscriber.onNext(\"World\");\n        subscriber.onCompleted();\n    }});\n```\n\n我们从上面的简单例子可以看到不管是观察者还是被观察者处理的数据类型都是基本的String类型。在真实的项目开发中，我们在使用Rxjava + Retrofit 的时候要处理的类型往往是通过服务器给定的，通常事先是不知道的。这就需要我们在类型的地方使用泛型来处理，这里只是简单的示例。\n\n> 除了可以使用 create来创建一个被观察者还可以使用just 和 from， 而这些都被称作操作符，大家可以去[这里](https://mcxiaoke.gitbooks.io/rxdocs/content/Operators.html) 了解一下。\n\n**3 订阅Subscribe**\n\n只要在 Observable中订阅一下，将Observe与其连接起来就是完成订阅了。\n\n举例说明一下：\n\n由指定的一个 drawable 文件 id drawableRes 取得图片，并显示在 ImageView 中，并在出现异常的时候打印 Toast 报错：\n\n```java\nint drawableRes = ...;\nImageView imageView = ...;\nObservable.create(new OnSubscribe<Drawable>() {\n    @Override\n    public void call(Subscriber<? super Drawable> subscriber) {\n        Drawable drawable = getTheme().getDrawable(drawableRes));\n        subscriber.onNext(drawable);\n        subscriber.onCompleted();\n    }\n}).subscribe(new Observer<Drawable>() {\n    @Override\n    public void onNext(Drawable drawable) {\n        imageView.setImageDrawable(drawable);\n    }\n\n    @Override\n    public void onCompleted() {\n    }\n\n    @Override\n    public void onError(Throwable e) {\n        Toast.makeText(activity, \"Error!\", Toast.LENGTH_SHORT).show();\n    }\n});\n```\n\n好，至此我们已经看到了整个观察者模式一个完整的流程了即创建 Observable 和 Observe 然后通过 Subscribe 连接两者即可。\n\n\n\n### 真正的使用Rxjava\n\n在上面一节 介绍观察者模式中我们提出来完整的流程，我们也就基本的了解了Rxjava的工作流程，但是这不是Rxjava真正的使用方式！\n\n因为我们使用Rxjava的最初目的还是处理 异步问题。而目前为止所看到的所有代码都是在同一个线程中执行的，所以并不是Rxjava真正的使用方式。接下来，我们就要在不同的线程之间去使用Rxjava。\n\n为了在不同的线程中去使用Rxjava这就表明我们需要线程切换。我在A线程做一件事情，然后切换到B线程去做另外一件事情。刚好Rxjava提供了调度器，它可以用来切换线程。在Rxjava中使用Schedulars --- 调度器来切换线程。该调度器已经默认提供了一些线程可供我们使用。\n\n| 方法名           | 描述                                       |\n| :------------ | :--------------------------------------- |\n| immediate()   | 在当前线程中执行(缺省模式)                           |\n| computation() | 计算所使用的 Scheduler。这个计算指的是 CPU 密集型计算，即不会被 I/O 等操作限制性能的操作，例如图形的计算。这个 Scheduler 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 computation() 中，否则 I/O 操作的等待时间会浪费 CPU。 |\n| io()          | I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程 |\n| newThread()   | 总是创建新的线程，并在新的线程中执行                       |\n| mainThread()  | Android中的主线程                             |\n\n一般在实际的项目中用到最多的就是 io  newThread 以及 mainThread 这三个线程。在被观察者中 Observable提供了 两个方式分别是 `subscribeOn()`  和 `observeOn()`  来指定观察者和被观察者分别运行在哪个线程。\n\n举例说明：\n\n```java\nServiceManager.getInstance()\n                        .getMovieService()\n                        .getMovie(0, 10)\n                        .subscribeOn(Schedulers.newThread())\n                        .observeOn(AndroidSchedulers.mainThread())\n                        .subscribe(new MySubscriber<ApiResult<Subject>>(context) {\n                            @Override\n                            public void onNext(ApiResult<Subject> subjectApiResult) {\n                                // do something\n                            }\n                        });\n```\n\n从这个例子上我们可以看到  观察者是运行在新的线程上而  被观察者则是运行在主线程上。注意看在subscribeOn() 的前一句是获取电影的相关信息  getMovie()， 而获取这个信息需要的时间可能较长且不确定所以放在了另外一个新的线程中去执行你可以说实在后台线程执行。最后得到数据之后在再主线程中进行相应的处理。（这里已经是使用了Rxjava + Retrofit）\n\n### Rxjava是如此的灵活\n\n如果你能看到这里非常感谢，以上的内容都是介绍和解释了Rxjava 是如何处理异步问题。还记得文章最开头提到的Rxjava的两个关键词吗？ 异步 +  简洁， 这一节就要介绍Rxjava为什么相比于其他处理异步问题的方式为什么简洁、灵活。\n\n我们先来说说什么样的逻辑是容易被理解的。我个人认为直的逻辑，换句话说不需要考虑各种分支各种例外情况或者是多层关系的逻辑是容易被理解的（层级、依赖、分支较少的逻辑我认为就是直的逻辑）。好比路线，一条直路就能到达目的地当时给人的感觉是清晰、简单的。恰好，Rxjava就是这种链式的一条直的逻辑。依靠着众多 操作符 能够非常方便的实现拼积木的感觉（多了直接扔掉，少了直接加上就好不用考虑依赖、层级之间的关系）。\n\n举例演示一下（注意这里Rxjava和Retrofit结合在使用）\n\n```java\nServiceManager.getInstance()\n                        .getMovieService()\n                        .getMovie(0, 10)\n                        .flatMap(new Func1<ApiResult<Subject>, Observable<Subject>>() {\n                            @Override\n                            public Observable<Subject> call(ApiResult<Subject> subjectApiResult) {\n                                return Observable.from(subjectApiResult.getSubjects());\n                            }\n                        })\n                        .map(new Func1<Subject, String>() {\n                            @Override\n                            public String call(Subject subject) {\n                                return subject.getTitle();\n                            }\n                        })\n                        .subscribeOn(Schedulers.io())\n                        .observeOn(AndroidSchedulers.mainThread())\n                        .subscribe(new MySubscriber<String>(context) {\n                            @Override\n                            public void onNext(String s) {\n                                apiResultTv.setText(s);\n                            }\n                        });\n```\n\nok,对于刚刚接触Rxjava的人可能一下子会觉得真正使用Rxjava是这么的麻烦，看着代码好像很多逻辑反而不清晰呢。其实这只是由于新接触Rxjava被表面的代码书写格式所吓到了而已。下面来分析一下这一串代码，首先介绍一下背景：\n\n我通过豆瓣电影API得到电影Top250 的相关信息，然后在手机上显示出来更新UI。\n\n> 豆瓣电影API可以在 [这里查看](https://developers.douban.com/wiki/?title=movie_v2) ，此处代码使用的是 榜单 [Top250](https://developers.douban.com/wiki/?title=movie_v2#top250) 这个接口(json返回结果较复杂请耐心分析)。在chrome浏览器中下载 postman 然后输入 https://api.douban.com/v2/movie/top250?start=0&count=10 查看json返回结果。\n\n我们来分析代码，首先通过getMovie() 得到了API所返回的json结果。这里根据提供的json结果返回的格式是\n\nObservable < ApiResult< Subject>> 是一个被观察者Observable （这里真实的场景就是我们通过网络就得到了被观察者而不是自己去创建），然后我们开始多次使用操作符来对这个最原始的 json返回结果进行剥离只留下我们需要的数据，比如这里我只需要榜单中电影的名字。\n\n第一次我们使用了 flatmap 得到了subject ， 然后我们再使用了 map 得到了String 这个对应着电影的名字。此时被观察者所发出的事件中的数据由 Observable < ApiResult< Subject>> 变成了 String 。至此被观察者的事情就处理好了事件源返回了我们想要的那一部分的数据。接下来分别使用 subscribeOn 和 observeOn 来分别指定这些任务应该运行在哪个线程。显然我们指定了观察者的任务处理在 io 线程， 被观察者是运行在主线程中的。最后的最后，我们进行了关注 - 订阅 告诉观察者如果你收到了被观察者的事件通知应该做点什么（setText 更新了UI）。\n\n好，如果你再结合上lambda 表达式的话，代码会看起来更清爽（但是个人不推荐）。\n\n```java\nServiceManager.getInstance()\n                        .getMovieService()\n                        .getMovie(0, 10)\n                        .flatMap(subjectApiResult -> Observable.from(subjectApiResult.getSubjects()))\n                        .map(subject -> subject.getTitle())\n                        .subscribeOn(Schedulers.io())\n                        .observeOn(AndroidSchedulers.mainThread())\n                        .subscribe(new MySubscriber<String>(context) {\n                            @Override\n                            public void onNext(String s) {\n                                apiResultTv.setText(s);\n                            }\n                        });\n```\n\n总结一下：其实整个这一串代码就是链式下来的一个直的逻辑。\n\n- 得到API返回结果                  getMovie()\n- 转化得到的结果为Subject   flatMap()\n- 转化得到的结果为String      map()\n- 指定线程                                observeOn()  subscribeOn()\n- 订阅                                        subscribe()\n\nRxjava 之所以说它灵活是因为在转化的过程中你想怎么转化都是可以的，它可以通过多种操作符来适应你的各种筛选要求。之后会用一篇文章介绍一下常用的一些操作符。\n\n---\n\n### ​后记\n\n终于告一段落了，Rxjava 的基本介绍就这么多了，希望这边文章能给你们一点点帮助。本文中除了 Rxjava 与 Retrofit结合的代码是原创，剩下的示例代码来自 扔物线。还有如果想了解一下 lambda 表达式的同学可以去 [这里学习](https://loshine.me/2016/03/30/use-lambda-in-android/)\n\n### 特别感谢\n\n- [饭窝](https://loshine.me/)\n\n- [扔物线](https://github.com/rengwuxian)\n\n  ​","content":"<blockquote>\n<p>本文较长建议在电脑上阅读(文中除 RxJava + Retrofit 结合运用部分，其余代码示例来自 扔物线 博客)</p>\n</blockquote>\n<p>2016年也差不多要结束了，作为一个Android小白今年学到的东西回头来看发现还是太少了。给我印象最深的是 MVP设计模式、Retrofit以及RxJava。这篇文章就来讲一下Retrofit和RxJava。</p>\n<p>网上有很多这两者相关的资料但是结合起来的文章比较少，本着我们学习的目的是为了真正在工作项目中使用，所以决定写下这篇文章，本人由于工作经验较少文中出现错误了希望大家指出纠正。</p>\n<p>这里我要先分开讲两者然后再结合起来，只有分开弄清楚了才能在结合的时候运用自如。</p>\n<h1 id=\"​RxJava\"><a href=\"#​RxJava\" class=\"headerlink\" title=\"​RxJava\"></a>​RxJava</h1><p>首先强烈推荐 <a href=\"https://github.com/rengwuxian\" target=\"_blank\" rel=\"external\">扔物线</a> 大大的这篇文章 <a href=\"http://gank.io/post/560e15be2dca930e00da1083\" target=\"_blank\" rel=\"external\"> 《给 Android 开发者的 RxJava 详解》</a> 毫不夸张的说，如果真正吃透了这篇文章肯定是能够理解并使用RxJava了（这篇文章较长，系统的介绍了RxJava）。</p>\n<p>本人也是看了许多RxJava的文章最终发现了这篇文章才对RxJava形成了一个相对清楚的认识和理解。这里我就用我自己的理解在来梳理一下RxJava。</p>\n<h3 id=\"为什么要用Rxjava，以及什么场景下使用\"><a href=\"#为什么要用Rxjava，以及什么场景下使用\" class=\"headerlink\" title=\"为什么要用Rxjava，以及什么场景下使用\"></a>为什么要用Rxjava，以及什么场景下使用</h3><blockquote>\n<p>a library for composing asynchronous and event-based programs by using observable sequences.— from Rxjava github</p>\n<p>通过使用可观察序列来组成异步和基于事件的程序的库。</p>\n</blockquote>\n<p>异步 + 简洁  是Rxjava的关键词 。</p>\n<ul>\n<li>在需要处理异步的场景下使用：Rxjava的本质还是为了处理异步这件事。</li>\n<li>因为Rxjava处理逻辑的十分简洁 ，采用了链式的组织方式使得方便拼接来处理复杂的逻辑。</li>\n</ul>\n<h3 id=\"介绍观察者模式\"><a href=\"#介绍观察者模式\" class=\"headerlink\" title=\"介绍观察者模式\"></a>介绍观察者模式</h3><p>因为Rxjava在处理异步问题的时候采用的是 观察者模式。我们首先来熟悉一下观察者模式。其实对于Android日常开发中我们已经非常熟练的去使用了观察者模式了。我们都使用过Button，写过Button的点击事件。</p>\n<ul>\n<li><strong>名词解释</strong>（熟悉自行跳过直接看 <code>代码实现</code> ）</li>\n</ul>\n<p>所谓的 观察者模式 也可以称为 注册-订阅模式，就拿当下十分流行的直播来类比一下。比如我很喜欢B站的一位阿婆主（咦，好像暴露了什么）。她的每次直播我都想看，假设阿婆主直播的时间不是固定的，那我很有可能错过直播那我应该怎么做才能解决这个问题呢？</p>\n<p>两种方式：</p>\n<ol>\n<li>阿婆主每次直播的时候自己主动通知我（我觉得只有可能我在阿婆主的粉丝群里或者就我一个观众 233才可能这样）</li>\n<li>我在B站上关注了阿婆主。注意噢，这里的关注就是意味着订阅了，也就是说只要阿婆主有直播我就能收到通知。</li>\n</ol>\n<p>至此我想你应该懂了什么叫 注册-订阅（观察者）模式了，就是说只要我订阅了某个事件源（阿婆主开直播），当事件发生时我就能收到通知。好，我们接下来用一张表来更加清晰的看看这个模式的各个部分组成。</p>\n<table>\n<thead>\n<tr>\n<th>观察者（事件处理者）</th>\n<th style=\"text-align:left\">被观察者（搞事者）</th>\n<th style=\"text-align:left\">订阅</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>我</td>\n<td style=\"text-align:left\">阿婆主</td>\n<td style=\"text-align:left\">关注阿婆主这个动作</td>\n</tr>\n</tbody>\n</table>\n<p>现在的直播都是采用观察者模式的，好处就是在于无论阿婆主有多少粉丝只要你关注（订阅）了阿婆主，当阿婆主开直播了，这个事件消息能够发送给所有订阅了的粉丝。也就是不需要阿婆主每一个人去挨个通知了。</p>\n<p>我们现在再回到开头的提到的Button的这个事情。我们换一种说法可以把观察者模式理解成为监听模式。关注阿婆主之后就好像放置了一个监听器一直在监听阿婆主是否开播这个事件。一旦阿婆主开播事件被触发监听器就启动，然后执行相应的处理（观看直播 or 给阿婆主刷刷礼物）。</p>\n<p>所以看到这里写Android的小伙伴是不是觉得监听器有点熟悉，这个在Button上监听它被点击了的监听器不就是OnClickListener吗？当Button（被观察者 or 事件源）被点击之后，OnClickListener（观察者 or 事件处理者）就开始执行相应的操作，可能是跳转Activity也可能是弹出dialog等等。那这个监听器是在哪里订阅或者说关注了Button的一举一动的呢？当然就是在你经常写的 <code>btn.setOnClickListener()</code>的时候啦。在这个时候Button已经被OnClickListener所关注了。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Observer  观察者（事件处理者）</th>\n<th>Observable  被观察者（搞事者）</th>\n<th>Subscribe  订阅</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">我</td>\n<td>阿婆主</td>\n<td>关注阿婆主这个动作</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">OnClickListener   监听器</td>\n<td>Button   按钮</td>\n<td>setOnClickListener   绑定监听</td>\n</tr>\n</tbody>\n</table>\n<p>好的，啰嗦了这么多我为什么要介绍这个观察者模式呢？ 是因为我们Rxjava就是要处理异步问题的，异步一般来说那个不在主线程中的任务会比较耗时，为了防止ANR就会用到观察者模式。观察者不用时时刻刻去查看是否需要更新View了（如果那样好累的说）只要我关注了我需要关注的事件源（比如Button的点击事件）就可以在发生了特定事件的时候获得消息然后再更新View。</p>\n<ul>\n<li><p><strong>代码实现</strong>.</p>\n<p><strong>0 如何引入Rxjava</strong></p>\n<p>Example for Gradle:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in your modules' build.gradle</span></div><div class=\"line\">   <span class=\"comment\">// Rxjava</span></div><div class=\"line\">   compile <span class=\"string\">'com.squareup.retrofit2:adapter-rxjava:2.0.2'</span></div><div class=\"line\">   <span class=\"comment\">// RXandroid</span></div><div class=\"line\">   compile <span class=\"string\">'io.reactivex:rxandroid:1.0.1'</span></div></pre></td></tr></table></figure>\n<p><strong>1 创建观察者（事件处理者）Observer</strong><br>观察者决定了当事件被触发了做出怎样的回应（在onNext 方法中处理）。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observer&lt;String&gt; observer = <span class=\"keyword\">new</span> Observer&lt;String&gt;() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">        Log.d(tag, <span class=\"string\">\"Item: \"</span> + s);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Log.d(tag, <span class=\"string\">\"Completed!\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</div><div class=\"line\">        Log.d(tag, <span class=\"string\">\"Error!\"</span>);</div><div class=\"line\">    &#125;&#125;;</div></pre></td></tr></table></figure>\n<p>​</p>\n<p>首先说明我们在实际的开发中一般创建观察者的时候使用的并不是Observer而是Subscriber。<br>Observer正如其字面的意思就是观察者，是一个接口里面的接口方法就是上面的三个方法，onNext()  onCompleted()  onError() 。而在实际开发中使用到的Subscriber是什么呢？<br>通过查看源码 public abstract class Subscriber<t> implements Observer<t>, Subscription ，原来Subscriber是一个抽象类它实现了 Observer 和 Sbuscription 这两个接口。</t></t></p>\n<ul>\n<li>Observer  — onNext()   onCompleted()  onError()</li>\n<li>subscription — unsubscribe()  isUnsubscribed()</li>\n</ul>\n</li>\n</ul>\n<p>其实Subscriber的用法跟Observer用法基本一致，相比于Observer多了一些重写方法,从表格中可以看出多了<code>unsubscribe()</code> 和 <code>isUnsubscribed()</code> 这两个方法。</p>\n<blockquote>\n<p>新增的这两个接口方法有着重要的意义，<code>unsubscribe()</code> 用于取消订阅。恩，既然我可以关注一个阿婆主当然也能够取消关注嘛。这个方法一般是在 onStop() 或者 onPause() 中去实现，取消订阅释放内存防止内存泄漏。阿婆主我取消对你关注了你不可能还死皮赖脸的缠着不放吧 233 。</p>\n</blockquote>\n<p>下面是 subscribe的创建（其实基本都是一样的）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">Subscriber&lt;String&gt; subscriber = <span class=\"keyword\">new</span> Subscriber&lt;String&gt;() &#123;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">        Log.d(tag, <span class=\"string\">\"Item: \"</span> + s);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    </div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Log.d(tag, <span class=\"string\">\"Completed!\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    </div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</div><div class=\"line\">        Log.d(tag, <span class=\"string\">\"Error!\"</span>);</div><div class=\"line\">    &#125;&#125;;</div></pre></td></tr></table></figure>\n<p><strong>2 创建被观察者（搞事者）Observable</strong></p>\n<p>Observable决定了发送什么事件以及何时发送时间即 what &amp; when。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable observable = Observable.create(<span class=\"keyword\">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Subscriber&lt;? <span class=\"keyword\">super</span> String&gt; subscriber)</span> </span>&#123;</div><div class=\"line\">        subscriber.onNext(<span class=\"string\">\"Hello\"</span>);</div><div class=\"line\">        subscriber.onNext(<span class=\"string\">\"World\"</span>);</div><div class=\"line\">        subscriber.onCompleted();</div><div class=\"line\">    &#125;&#125;);</div></pre></td></tr></table></figure>\n<p>我们从上面的简单例子可以看到不管是观察者还是被观察者处理的数据类型都是基本的String类型。在真实的项目开发中，我们在使用Rxjava + Retrofit 的时候要处理的类型往往是通过服务器给定的，通常事先是不知道的。这就需要我们在类型的地方使用泛型来处理，这里只是简单的示例。</p>\n<blockquote>\n<p>除了可以使用 create来创建一个被观察者还可以使用just 和 from， 而这些都被称作操作符，大家可以去<a href=\"https://mcxiaoke.gitbooks.io/rxdocs/content/Operators.html\" target=\"_blank\" rel=\"external\">这里</a> 了解一下。</p>\n</blockquote>\n<p><strong>3 订阅Subscribe</strong></p>\n<p>只要在 Observable中订阅一下，将Observe与其连接起来就是完成订阅了。</p>\n<p>举例说明一下：</p>\n<p>由指定的一个 drawable 文件 id drawableRes 取得图片，并显示在 ImageView 中，并在出现异常的时候打印 Toast 报错：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> drawableRes = ...;</div><div class=\"line\">ImageView imageView = ...;</div><div class=\"line\">Observable.create(<span class=\"keyword\">new</span> OnSubscribe&lt;Drawable&gt;() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Subscriber&lt;? <span class=\"keyword\">super</span> Drawable&gt; subscriber)</span> </span>&#123;</div><div class=\"line\">        Drawable drawable = getTheme().getDrawable(drawableRes));</div><div class=\"line\">        subscriber.onNext(drawable);</div><div class=\"line\">        subscriber.onCompleted();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;).subscribe(<span class=\"keyword\">new</span> Observer&lt;Drawable&gt;() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(Drawable drawable)</span> </span>&#123;</div><div class=\"line\">        imageView.setImageDrawable(drawable);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</div><div class=\"line\">        Toast.makeText(activity, <span class=\"string\">\"Error!\"</span>, Toast.LENGTH_SHORT).show();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>好，至此我们已经看到了整个观察者模式一个完整的流程了即创建 Observable 和 Observe 然后通过 Subscribe 连接两者即可。</p>\n<h3 id=\"真正的使用Rxjava\"><a href=\"#真正的使用Rxjava\" class=\"headerlink\" title=\"真正的使用Rxjava\"></a>真正的使用Rxjava</h3><p>在上面一节 介绍观察者模式中我们提出来完整的流程，我们也就基本的了解了Rxjava的工作流程，但是这不是Rxjava真正的使用方式！</p>\n<p>因为我们使用Rxjava的最初目的还是处理 异步问题。而目前为止所看到的所有代码都是在同一个线程中执行的，所以并不是Rxjava真正的使用方式。接下来，我们就要在不同的线程之间去使用Rxjava。</p>\n<p>为了在不同的线程中去使用Rxjava这就表明我们需要线程切换。我在A线程做一件事情，然后切换到B线程去做另外一件事情。刚好Rxjava提供了调度器，它可以用来切换线程。在Rxjava中使用Schedulars — 调度器来切换线程。该调度器已经默认提供了一些线程可供我们使用。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法名</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">immediate()</td>\n<td style=\"text-align:left\">在当前线程中执行(缺省模式)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">computation()</td>\n<td style=\"text-align:left\">计算所使用的 Scheduler。这个计算指的是 CPU 密集型计算，即不会被 I/O 等操作限制性能的操作，例如图形的计算。这个 Scheduler 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 computation() 中，否则 I/O 操作的等待时间会浪费 CPU。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">io()</td>\n<td style=\"text-align:left\">I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">newThread()</td>\n<td style=\"text-align:left\">总是创建新的线程，并在新的线程中执行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mainThread()</td>\n<td style=\"text-align:left\">Android中的主线程</td>\n</tr>\n</tbody>\n</table>\n<p>一般在实际的项目中用到最多的就是 io  newThread 以及 mainThread 这三个线程。在被观察者中 Observable提供了 两个方式分别是 <code>subscribeOn()</code>  和 <code>observeOn()</code>  来指定观察者和被观察者分别运行在哪个线程。</p>\n<p>举例说明：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">ServiceManager.getInstance()</div><div class=\"line\">                        .getMovieService()</div><div class=\"line\">                        .getMovie(<span class=\"number\">0</span>, <span class=\"number\">10</span>)</div><div class=\"line\">                        .subscribeOn(Schedulers.newThread())</div><div class=\"line\">                        .observeOn(AndroidSchedulers.mainThread())</div><div class=\"line\">                        .subscribe(<span class=\"keyword\">new</span> MySubscriber&lt;ApiResult&lt;Subject&gt;&gt;(context) &#123;</div><div class=\"line\">                            <span class=\"meta\">@Override</span></div><div class=\"line\">                            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(ApiResult&lt;Subject&gt; subjectApiResult)</span> </span>&#123;</div><div class=\"line\">                                <span class=\"comment\">// do something</span></div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;);</div></pre></td></tr></table></figure>\n<p>从这个例子上我们可以看到  观察者是运行在新的线程上而  被观察者则是运行在主线程上。注意看在subscribeOn() 的前一句是获取电影的相关信息  getMovie()， 而获取这个信息需要的时间可能较长且不确定所以放在了另外一个新的线程中去执行你可以说实在后台线程执行。最后得到数据之后在再主线程中进行相应的处理。（这里已经是使用了Rxjava + Retrofit）</p>\n<h3 id=\"Rxjava是如此的灵活\"><a href=\"#Rxjava是如此的灵活\" class=\"headerlink\" title=\"Rxjava是如此的灵活\"></a>Rxjava是如此的灵活</h3><p>如果你能看到这里非常感谢，以上的内容都是介绍和解释了Rxjava 是如何处理异步问题。还记得文章最开头提到的Rxjava的两个关键词吗？ 异步 +  简洁， 这一节就要介绍Rxjava为什么相比于其他处理异步问题的方式为什么简洁、灵活。</p>\n<p>我们先来说说什么样的逻辑是容易被理解的。我个人认为直的逻辑，换句话说不需要考虑各种分支各种例外情况或者是多层关系的逻辑是容易被理解的（层级、依赖、分支较少的逻辑我认为就是直的逻辑）。好比路线，一条直路就能到达目的地当时给人的感觉是清晰、简单的。恰好，Rxjava就是这种链式的一条直的逻辑。依靠着众多 操作符 能够非常方便的实现拼积木的感觉（多了直接扔掉，少了直接加上就好不用考虑依赖、层级之间的关系）。</p>\n<p>举例演示一下（注意这里Rxjava和Retrofit结合在使用）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">ServiceManager.getInstance()</div><div class=\"line\">                        .getMovieService()</div><div class=\"line\">                        .getMovie(<span class=\"number\">0</span>, <span class=\"number\">10</span>)</div><div class=\"line\">                        .flatMap(<span class=\"keyword\">new</span> Func1&lt;ApiResult&lt;Subject&gt;, Observable&lt;Subject&gt;&gt;() &#123;</div><div class=\"line\">                            <span class=\"meta\">@Override</span></div><div class=\"line\">                            <span class=\"function\"><span class=\"keyword\">public</span> Observable&lt;Subject&gt; <span class=\"title\">call</span><span class=\"params\">(ApiResult&lt;Subject&gt; subjectApiResult)</span> </span>&#123;</div><div class=\"line\">                                <span class=\"keyword\">return</span> Observable.from(subjectApiResult.getSubjects());</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;)</div><div class=\"line\">                        .map(<span class=\"keyword\">new</span> Func1&lt;Subject, String&gt;() &#123;</div><div class=\"line\">                            <span class=\"meta\">@Override</span></div><div class=\"line\">                            <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">call</span><span class=\"params\">(Subject subject)</span> </span>&#123;</div><div class=\"line\">                                <span class=\"keyword\">return</span> subject.getTitle();</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;)</div><div class=\"line\">                        .subscribeOn(Schedulers.io())</div><div class=\"line\">                        .observeOn(AndroidSchedulers.mainThread())</div><div class=\"line\">                        .subscribe(<span class=\"keyword\">new</span> MySubscriber&lt;String&gt;(context) &#123;</div><div class=\"line\">                            <span class=\"meta\">@Override</span></div><div class=\"line\">                            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">                                apiResultTv.setText(s);</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;);</div></pre></td></tr></table></figure>\n<p>ok,对于刚刚接触Rxjava的人可能一下子会觉得真正使用Rxjava是这么的麻烦，看着代码好像很多逻辑反而不清晰呢。其实这只是由于新接触Rxjava被表面的代码书写格式所吓到了而已。下面来分析一下这一串代码，首先介绍一下背景：</p>\n<p>我通过豆瓣电影API得到电影Top250 的相关信息，然后在手机上显示出来更新UI。</p>\n<blockquote>\n<p>豆瓣电影API可以在 <a href=\"https://developers.douban.com/wiki/?title=movie_v2\" target=\"_blank\" rel=\"external\">这里查看</a> ，此处代码使用的是 榜单 <a href=\"https://developers.douban.com/wiki/?title=movie_v2#top250\" target=\"_blank\" rel=\"external\">Top250</a> 这个接口(json返回结果较复杂请耐心分析)。在chrome浏览器中下载 postman 然后输入 <a href=\"https://api.douban.com/v2/movie/top250?start=0&amp;count=10\" target=\"_blank\" rel=\"external\">https://api.douban.com/v2/movie/top250?start=0&amp;count=10</a> 查看json返回结果。</p>\n</blockquote>\n<p>我们来分析代码，首先通过getMovie() 得到了API所返回的json结果。这里根据提供的json结果返回的格式是</p>\n<p>Observable &lt; ApiResult&lt; Subject&gt;&gt; 是一个被观察者Observable （这里真实的场景就是我们通过网络就得到了被观察者而不是自己去创建），然后我们开始多次使用操作符来对这个最原始的 json返回结果进行剥离只留下我们需要的数据，比如这里我只需要榜单中电影的名字。</p>\n<p>第一次我们使用了 flatmap 得到了subject ， 然后我们再使用了 map 得到了String 这个对应着电影的名字。此时被观察者所发出的事件中的数据由 Observable &lt; ApiResult&lt; Subject&gt;&gt; 变成了 String 。至此被观察者的事情就处理好了事件源返回了我们想要的那一部分的数据。接下来分别使用 subscribeOn 和 observeOn 来分别指定这些任务应该运行在哪个线程。显然我们指定了观察者的任务处理在 io 线程， 被观察者是运行在主线程中的。最后的最后，我们进行了关注 - 订阅 告诉观察者如果你收到了被观察者的事件通知应该做点什么（setText 更新了UI）。</p>\n<p>好，如果你再结合上lambda 表达式的话，代码会看起来更清爽（但是个人不推荐）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">ServiceManager.getInstance()</div><div class=\"line\">                        .getMovieService()</div><div class=\"line\">                        .getMovie(<span class=\"number\">0</span>, <span class=\"number\">10</span>)</div><div class=\"line\">                        .flatMap(subjectApiResult -&gt; Observable.from(subjectApiResult.getSubjects()))</div><div class=\"line\">                        .map(subject -&gt; subject.getTitle())</div><div class=\"line\">                        .subscribeOn(Schedulers.io())</div><div class=\"line\">                        .observeOn(AndroidSchedulers.mainThread())</div><div class=\"line\">                        .subscribe(<span class=\"keyword\">new</span> MySubscriber&lt;String&gt;(context) &#123;</div><div class=\"line\">                            <span class=\"meta\">@Override</span></div><div class=\"line\">                            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">                                apiResultTv.setText(s);</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;);</div></pre></td></tr></table></figure>\n<p>总结一下：其实整个这一串代码就是链式下来的一个直的逻辑。</p>\n<ul>\n<li>得到API返回结果                  getMovie()</li>\n<li>转化得到的结果为Subject   flatMap()</li>\n<li>转化得到的结果为String      map()</li>\n<li>指定线程                                observeOn()  subscribeOn()</li>\n<li>订阅                                        subscribe()</li>\n</ul>\n<p>Rxjava 之所以说它灵活是因为在转化的过程中你想怎么转化都是可以的，它可以通过多种操作符来适应你的各种筛选要求。之后会用一篇文章介绍一下常用的一些操作符。</p>\n<hr>\n<h3 id=\"​后记\"><a href=\"#​后记\" class=\"headerlink\" title=\"​后记\"></a>​后记</h3><p>终于告一段落了，Rxjava 的基本介绍就这么多了，希望这边文章能给你们一点点帮助。本文中除了 Rxjava 与 Retrofit结合的代码是原创，剩下的示例代码来自 扔物线。还有如果想了解一下 lambda 表达式的同学可以去 <a href=\"https://loshine.me/2016/03/30/use-lambda-in-android/\" target=\"_blank\" rel=\"external\">这里学习</a></p>\n<h3 id=\"特别感谢\"><a href=\"#特别感谢\" class=\"headerlink\" title=\"特别感谢\"></a>特别感谢</h3><ul>\n<li><p><a href=\"https://loshine.me/\" target=\"_blank\" rel=\"external\">饭窝</a></p>\n</li>\n<li><p><a href=\"https://github.com/rengwuxian\" target=\"_blank\" rel=\"external\">扔物线</a></p>\n<p>​</p>\n</li>\n</ul>\n","slug":"Retrofit-RxJava-从入门到跑路（Rxjava介绍）","updated":"2016-12-29T06:48:57.381Z","comments":true,"link":"","permalink":"https://jngoogle.github.io/2016/12/26/Retrofit-RxJava-从入门到跑路（Rxjava介绍）/","excerpt":"","categories":[{"name":"Android","slug":"Android","permalink":"https://jngoogle.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://jngoogle.github.io/tags/Android/"}]},{"title":"做一个Android计算器","date":"2016-12-11T11:31:43.000Z","path":"2016/12/11/做一个Android计算器，我学到了什么/","text":"知识点清单 TableLayout 相关知识 AnimationSet 相关知识（简单的动画效果实现） 可选 butterknife（声明 View 控件的另一种方式） 核心思路通过 后缀表达式 来计算输入的算式，是本程序逻辑的重点。 先来解释一下为什么做一个计算器会用到 后缀表达式 。我们人脑在处理算式的时候是按照 中缀表达式 的方式来处理的。比如：6 - 4 ，我们大脑处理这个算式的顺序很自然的就是6减去4最后得到结果。如果更复杂一些的算式如：6 - 4 x 3 ，我们第一反应是根据运算符的优先级别决定先运算4 x 3 然后再用6减去之前得到的结果。 综上所述，我们人脑在计算算式的时候其实是按照 中缀表达式 的顺序来计算的。但是如果我们程序采用这种方式来计算算式编写的逻辑会十分的麻烦，所以这里我们就提出来 后缀表达式 来方便程序逻辑的编写，同时也是方便计算机处理。所以在编写的逻辑中我们有着关键一步就是把 中缀表达式 转换成为 后缀表达式 。 好了，我们来从全局整理一下我们编写计算器的逻辑。 1 得到用户输入的算式（此算式为中缀表达式所表示）。 2 将此中缀表达式转化成后缀表达式。 3 计算转化得到的后缀表达式得出算式结果。 实现步骤项目地址 这里只讨论关键思路，详细的代码请查看项目地址中的代码。 获得用户输入的具体过程 按照中缀表达式（即从左到右的顺序把 String 存到栈中） 1 用 num 作为一个存放数字或者点号的临时变量。 2 判断当前要存入栈的字符是 运算符 还是 数字或者点号。 3 交替的存入 num 和 运算符。 ps：需要注意的一种情况是。用户输入进来的字符串的第一个字符是 运算符，若为此种情况应当在该字符串的首位添加一个0保证后续计算的正确性！（若没有添加0，在使用后缀表达式计算的时候会由于缺少一个运算数报错）。 举例：用户此时的输入是 -6-2 ， 按照后缀表达式的规则先把该式子写成后缀表达式为 6-2- ，然后按照后缀表达式的计算规则，当读到运算符（第一个减号）的时候，弹出前面入栈的两个元素进行计算，但此时在减号前面入栈的只有6这一个元素无法计算，因此报错。 把中缀表达式转变成后缀表达式（重点讨论） 1 建立两个栈， 一个是存放转化成为后缀表达式的栈 A，一个是存放运算符的栈 B。 2 首先根据上一步，我们已经保证了得到的输入字符串的首位肯定是一个数字。开始进行转化逻辑如下： ​ 从左向右依次读取字符串 ​ 2.1 如果是数字或者点号存入到 A ​ 2.2 如果是运算符，一 当 B 栈为空则直接放入 B； 二 B 栈不为空把该栈顶元素与当前得到的元算符进行优先级比较。如果运算符栈顶运算符的优先级大于当前运算符则把栈顶运算符存入到 A ，把当前运算符存入到 B 中；如果运算符栈顶元素的优先级小于当前元算符，则直接把当前运算符存入到 B 中。 ​ 2.3 检查 B 栈 ， 如果还有元素存在则都存入 A 中。 ​ 3 最终得到 A 栈中的结果就是用后缀表达式的方式所表示的字符串。 举例：中缀表达式为 6-5x4 1 把6放入栈 A 中。 2 把减号放入栈 B 中。 3 5放入栈 A 中。 4 乘号由于比 B 中的减号优先级高则直接放入栈 B 中。（此时是运算符栈顶元素减号优先级小于当前元素乘号的情况）。 5 把4放入栈中 此时两个栈的情况是： A ：654； B：-X ； 6 最后把 B 中的元素弹出依次放入 A 中，最终得到的后缀表达式为 654x- 举例：中缀表达式为6x5-4 1 存入6到 A 栈中。 2 把乘号放入运算符栈 B 3 5存入栈 A 中。 4 减号是当前元素由于元算符 B 栈顶元素是乘号优先级高于减号，所以弹出 B 栈的栈顶元素即乘号放入 A 中，然后把当前元素 减号 再放入 B 中。此时两个栈的情况为： A：65x ； B：- ； 5 把4放入 A 中。 6 把 B 中所有的元素（若有）放入 A 中，即把减号放入 A 中。最终得到的后缀表达式为 65X4- 计算后缀表达式 从左至右依次读取由后缀表达式表示的字符串 1 如果读到当前字符是数字或者点号则存入栈中。 2 如果读到运算符则把栈顶的两个元素弹出来然后用该运算符对其计算，所得到的结果再存入栈中。 以上就是整个计算器实现的关键思路了，详细的代码可以去项目查看。如果你有什么问题可以在项目中 讨论 中交流。 对了对了，最后如果你也喜爱二次元或者喜爱翻唱欢迎来加微博，在博客的左边。","raw":"---\ntitle: 做一个Android计算器\ndate: 2016-12-11 19:31:43\ntags: Android\ncategories: Android\n---\n\n## 知识点清单\n\n- TableLayout 相关知识\n- AnimationSet 相关知识（简单的动画效果实现）\n- 可选 [butterknife](https://github.com/JakeWharton/butterknife)（声明 View 控件的另一种方式）\n\n## 核心思路\n\n通过  `后缀表达式`  来计算输入的算式，是本程序逻辑的重点。\n\n先来解释一下为什么做一个计算器会用到  `后缀表达式` 。我们人脑在处理算式的时候是按照  `中缀表达式`  的方式来处理的。比如：6 - 4  ，我们大脑处理这个算式的顺序很自然的就是6减去4最后得到结果。如果更复杂一些的算式如：6 - 4 x 3 ，我们第一反应是根据运算符的优先级别决定先运算4 x 3 然后再用6减去之前得到的结果。\n\n**综上所述，我们人脑在计算算式的时候其实是按照  `中缀表达式` 的顺序来计算的。**但是如果我们程序采用这种方式来计算算式编写的逻辑会十分的麻烦，所以这里我们就提出来  `后缀表达式`  来方便程序逻辑的编写，同时也是方便计算机处理。所以在编写的逻辑中我们有着关键一步就是把 `中缀表达式`  转换成为 `后缀表达式` 。\n\n好了，我们来从全局整理一下我们编写计算器的逻辑。\n\n1  得到用户输入的算式（此算式为中缀表达式所表示）。\n\n2  将此中缀表达式转化成后缀表达式。\n\n3  计算转化得到的后缀表达式得出算式结果。 \n\n## 实现步骤\n\n[项目地址](https://coding.net/u/jammic/p/JCalculator/git)\n\n这里只讨论关键思路，详细的代码请查看项目地址中的代码。\n\n- **获得用户输入的具体过程**\n\n  *按照中缀表达式（即从左到右的顺序把 String 存到栈中）*\n\n  1  用 `num` 作为一个存放数字或者点号的临时变量。\n\n  2  判断当前要存入栈的字符是 运算符 还是 数字或者点号。\n\n  3  交替的存入 `num`  和 运算符。\n\n  ps：`需要注意的一种情况是。用户输入进来的字符串的第一个字符是 运算符，若为此种情况应当在该字符串的首位添加一个0保证后续计算的正确性！（若没有添加0，在使用后缀表达式计算的时候会由于缺少一个运算数报错）。`\n\n  > 举例：用户此时的输入是  -6-2 ， 按照后缀表达式的规则先把该式子写成后缀表达式为 6-2- ，然后按照后缀表达式的计算规则，当读到运算符（第一个减号）的时候，弹出前面入栈的两个元素进行计算，但此时在减号前面入栈的只有6这一个元素无法计算，因此报错。\n\n- **把中缀表达式转变成后缀表达式（重点讨论）**\n\n   1  建立两个栈， 一个是存放转化成为后缀表达式的栈 A，一个是存放运算符的栈 B。\n\n   2  首先根据上一步，我们已经保证了得到的输入字符串的首位肯定是一个数字。开始进行转化逻辑如下：\n\n  ​\t*从左向右依次读取字符串*\n\n  ​     2.1  如果是数字或者点号存入到 A  \n\n  ​     2.2  如果是运算符，一 当 B 栈为空则直接放入 B； 二  B 栈不为空把该栈顶元素与当前得到的元算符进行优先级比较。如果运算符栈顶运算符的优先级大于当前运算符则把栈顶运算符存入到  A  ，把当前运算符存入到 B 中；如果运算符栈顶元素的优先级小于当前元算符，则直接把当前运算符存入到 B 中。\n\n  ​     2.3  检查 B 栈 ， 如果还有元素存在则都存入  A  中。\n\n​         3  最终得到  A 栈中的结果就是用后缀表达式的方式所表示的字符串。\n\n> 举例：中缀表达式为 6-5x4\n>\n> 1  把6放入栈 A 中。\n>\n> 2  把减号放入栈 B 中。\n>\n> 3  5放入栈  A  中。\n>\n> 4   乘号由于比  B  中的减号优先级高则直接放入栈 B 中。（此时是运算符栈顶元素减号优先级小于当前元素乘号的情况）。\n>\n> 5  把4放入栈中\n>\n> 此时两个栈的情况是： A ：654；  B：-X  ；\n>\n> 6  最后把 B 中的元素弹出依次放入 A 中，最终得到的后缀表达式为 654x-\n\n<br>\n\n> 举例：中缀表达式为6x5-4\n>\n> 1 存入6到 A 栈中。\n>\n> 2  把乘号放入运算符栈 B\n>\n> 3  5存入栈 A 中。\n>\n> 4  减号是当前元素由于元算符 B 栈顶元素是乘号优先级高于减号，所以弹出 B 栈的栈顶元素即乘号放入 A 中，然后把当前元素 减号 再放入 B 中。此时两个栈的情况为： A：65x ； B：-  ；\n>\n> 5  把4放入 A  中。\n>\n> 6  把 B 中所有的元素（若有）放入 A 中，即把减号放入 A 中。最终得到的后缀表达式为 65X4-\n\n- **计算后缀表达式**\n\n  *从左至右依次读取由后缀表达式表示的字符串*\n\n  1  如果读到当前字符是数字或者点号则存入栈中。\n\n  2  如果读到运算符则把栈顶的两个元素弹出来然后用该运算符对其计算，所得到的结果再存入栈中。\n\n---\n\n以上就是整个计算器实现的关键思路了，详细的代码可以去[项目](https://coding.net/u/jammic/p/JCalculator/git)查看。如果你有什么问题可以在项目中 `讨论`  中交流。\n\n对了对了，最后如果你也喜爱二次元或者喜爱翻唱欢迎来加微博，在博客的左边。\n\n\n\n\n","content":"<h2 id=\"知识点清单\"><a href=\"#知识点清单\" class=\"headerlink\" title=\"知识点清单\"></a>知识点清单</h2><ul>\n<li>TableLayout 相关知识</li>\n<li>AnimationSet 相关知识（简单的动画效果实现）</li>\n<li>可选 <a href=\"https://github.com/JakeWharton/butterknife\" target=\"_blank\" rel=\"external\">butterknife</a>（声明 View 控件的另一种方式）</li>\n</ul>\n<h2 id=\"核心思路\"><a href=\"#核心思路\" class=\"headerlink\" title=\"核心思路\"></a>核心思路</h2><p>通过  <code>后缀表达式</code>  来计算输入的算式，是本程序逻辑的重点。</p>\n<p>先来解释一下为什么做一个计算器会用到  <code>后缀表达式</code> 。我们人脑在处理算式的时候是按照  <code>中缀表达式</code>  的方式来处理的。比如：6 - 4  ，我们大脑处理这个算式的顺序很自然的就是6减去4最后得到结果。如果更复杂一些的算式如：6 - 4 x 3 ，我们第一反应是根据运算符的优先级别决定先运算4 x 3 然后再用6减去之前得到的结果。</p>\n<p><strong>综上所述，我们人脑在计算算式的时候其实是按照  <code>中缀表达式</code> 的顺序来计算的。</strong>但是如果我们程序采用这种方式来计算算式编写的逻辑会十分的麻烦，所以这里我们就提出来  <code>后缀表达式</code>  来方便程序逻辑的编写，同时也是方便计算机处理。所以在编写的逻辑中我们有着关键一步就是把 <code>中缀表达式</code>  转换成为 <code>后缀表达式</code> 。</p>\n<p>好了，我们来从全局整理一下我们编写计算器的逻辑。</p>\n<p>1  得到用户输入的算式（此算式为中缀表达式所表示）。</p>\n<p>2  将此中缀表达式转化成后缀表达式。</p>\n<p>3  计算转化得到的后缀表达式得出算式结果。 </p>\n<h2 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h2><p><a href=\"https://coding.net/u/jammic/p/JCalculator/git\" target=\"_blank\" rel=\"external\">项目地址</a></p>\n<p>这里只讨论关键思路，详细的代码请查看项目地址中的代码。</p>\n<ul>\n<li><p><strong>获得用户输入的具体过程</strong></p>\n<p><em>按照中缀表达式（即从左到右的顺序把 String 存到栈中）</em></p>\n<p>1  用 <code>num</code> 作为一个存放数字或者点号的临时变量。</p>\n<p>2  判断当前要存入栈的字符是 运算符 还是 数字或者点号。</p>\n<p>3  交替的存入 <code>num</code>  和 运算符。</p>\n<p>ps：<code>需要注意的一种情况是。用户输入进来的字符串的第一个字符是 运算符，若为此种情况应当在该字符串的首位添加一个0保证后续计算的正确性！（若没有添加0，在使用后缀表达式计算的时候会由于缺少一个运算数报错）。</code></p>\n<blockquote>\n<p>举例：用户此时的输入是  -6-2 ， 按照后缀表达式的规则先把该式子写成后缀表达式为 6-2- ，然后按照后缀表达式的计算规则，当读到运算符（第一个减号）的时候，弹出前面入栈的两个元素进行计算，但此时在减号前面入栈的只有6这一个元素无法计算，因此报错。</p>\n</blockquote>\n</li>\n<li><p><strong>把中缀表达式转变成后缀表达式（重点讨论）</strong></p>\n<p> 1  建立两个栈， 一个是存放转化成为后缀表达式的栈 A，一个是存放运算符的栈 B。</p>\n<p> 2  首先根据上一步，我们已经保证了得到的输入字符串的首位肯定是一个数字。开始进行转化逻辑如下：</p>\n<p>​    <em>从左向右依次读取字符串</em></p>\n<p>​     2.1  如果是数字或者点号存入到 A  </p>\n<p>​     2.2  如果是运算符，一 当 B 栈为空则直接放入 B； 二  B 栈不为空把该栈顶元素与当前得到的元算符进行优先级比较。如果运算符栈顶运算符的优先级大于当前运算符则把栈顶运算符存入到  A  ，把当前运算符存入到 B 中；如果运算符栈顶元素的优先级小于当前元算符，则直接把当前运算符存入到 B 中。</p>\n<p>​     2.3  检查 B 栈 ， 如果还有元素存在则都存入  A  中。</p>\n</li>\n</ul>\n<p>​         3  最终得到  A 栈中的结果就是用后缀表达式的方式所表示的字符串。</p>\n<blockquote>\n<p>举例：中缀表达式为 6-5x4</p>\n<p>1  把6放入栈 A 中。</p>\n<p>2  把减号放入栈 B 中。</p>\n<p>3  5放入栈  A  中。</p>\n<p>4   乘号由于比  B  中的减号优先级高则直接放入栈 B 中。（此时是运算符栈顶元素减号优先级小于当前元素乘号的情况）。</p>\n<p>5  把4放入栈中</p>\n<p>此时两个栈的情况是： A ：654；  B：-X  ；</p>\n<p>6  最后把 B 中的元素弹出依次放入 A 中，最终得到的后缀表达式为 654x-</p>\n</blockquote>\n<p><br></p>\n<blockquote>\n<p>举例：中缀表达式为6x5-4</p>\n<p>1 存入6到 A 栈中。</p>\n<p>2  把乘号放入运算符栈 B</p>\n<p>3  5存入栈 A 中。</p>\n<p>4  减号是当前元素由于元算符 B 栈顶元素是乘号优先级高于减号，所以弹出 B 栈的栈顶元素即乘号放入 A 中，然后把当前元素 减号 再放入 B 中。此时两个栈的情况为： A：65x ； B：-  ；</p>\n<p>5  把4放入 A  中。</p>\n<p>6  把 B 中所有的元素（若有）放入 A 中，即把减号放入 A 中。最终得到的后缀表达式为 65X4-</p>\n</blockquote>\n<ul>\n<li><p><strong>计算后缀表达式</strong></p>\n<p><em>从左至右依次读取由后缀表达式表示的字符串</em></p>\n<p>1  如果读到当前字符是数字或者点号则存入栈中。</p>\n<p>2  如果读到运算符则把栈顶的两个元素弹出来然后用该运算符对其计算，所得到的结果再存入栈中。</p>\n</li>\n</ul>\n<hr>\n<p>以上就是整个计算器实现的关键思路了，详细的代码可以去<a href=\"https://coding.net/u/jammic/p/JCalculator/git\" target=\"_blank\" rel=\"external\">项目</a>查看。如果你有什么问题可以在项目中 <code>讨论</code>  中交流。</p>\n<p>对了对了，最后如果你也喜爱二次元或者喜爱翻唱欢迎来加微博，在博客的左边。</p>\n","slug":"做一个Android计算器，我学到了什么","updated":"2016-12-13T06:54:35.199Z","comments":true,"link":"","permalink":"https://jngoogle.github.io/2016/12/11/做一个Android计算器，我学到了什么/","excerpt":"","categories":[{"name":"Android","slug":"Android","permalink":"https://jngoogle.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://jngoogle.github.io/tags/Android/"}]},{"title":"Hello World","date":"2016-12-09T10:18:11.602Z","path":"2016/12/09/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","slug":"hello-world","updated":"2016-12-09T10:18:11.603Z","comments":true,"link":"","permalink":"https://jngoogle.github.io/2016/12/09/hello-world/","excerpt":"","categories":[],"tags":[]}]}