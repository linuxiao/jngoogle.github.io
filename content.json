{"meta":{"title":"Jngoogle","subtitle":"interesting","description":null,"author":"Jngoogle","url":"https://jngoogle.github.io"},"pages":[],"posts":[{"title":"做一个Android计算器","date":"2016-12-11T11:31:43.000Z","path":"2016/12/11/做一个Android计算器，我学到了什么/","text":"知识点清单 TableLayout 相关知识 AnimationSet 相关知识（简单的动画效果实现） 可选 butterknife（声明 View 控件的另一种方式） 核心思路通过 后缀表达式 来计算输入的算式，是本程序逻辑的重点。 先来解释一下为什么做一个计算器会用到 后缀表达式 。我们人脑在处理算式的时候是按照 中缀表达式 的方式来处理的。比如：6 - 4 ，我们大脑处理这个算式的顺序很自然的就是6减去4最后得到结果。如果更复杂一些的算式如：6 - 4 x 3 ，我们第一反应是根据运算符的优先级别决定先运算4 x 3 然后再用6减去之前得到的结果。 综上所述，我们人脑在计算算式的时候其实是按照 中缀表达式 的顺序来计算的。但是如果我们程序采用这种方式来计算算式编写的逻辑会十分的麻烦，所以这里我们就提出来 后缀表达式 来方便程序逻辑的编写，同时也是方便计算机处理。所以在编写的逻辑中我们有着关键一步就是把 中缀表达式 转换成为 后缀表达式 。 好了，我们来从全局整理一下我们编写计算器的逻辑。 1 得到用户输入的算式（此算式为中缀表达式所表示）。 2 将此中缀表达式转化成后缀表达式。 3 计算转化得到的后缀表达式得出算式结果。 实现步骤项目地址 这里只讨论关键思路，详细的代码请查看项目地址中的代码。 获得用户输入的具体过程 按照中缀表达式（即从左到右的顺序把 String 存到栈中） 1 用 num 作为一个存放数字或者点号的临时变量。 2 判断当前要存入栈的字符是 运算符 还是 数字或者点号。 3 交替的存入 num 和 运算符。 ps：需要注意的一种情况是。用户输入进来的字符串的第一个字符是 运算符，若为此种情况应当在该字符串的首位添加一个0保证后续计算的正确性！（若没有添加0，在使用后缀表达式计算的时候会由于缺少一个运算数报错）。 举例：用户此时的输入是 -6-2 ， 按照后缀表达式的规则先把该式子写成后缀表达式为 6-2- ，然后按照后缀表达式的计算规则，当读到运算符（第一个减号）的时候，弹出前面入栈的两个元素进行计算，但此时在减号前面入栈的只有6这一个元素无法计算，因此报错。 把中缀表达式转变成后缀表达式（重点讨论） 1 建立两个栈， 一个是存放转化成为后缀表达式的栈 A，一个是存放运算符的栈 B。 2 首先根据上一步，我们已经保证了得到的输入字符串的首位肯定是一个数字。开始进行转化逻辑如下： ​ 从左向右依次读取字符串 ​ 2.1 如果是数字或者点号存入到 A ​ 2.2 如果是运算符，一 当 B 栈为空则直接放入 B； 二 B 栈不为空把该栈顶元素与当前得到的元算符进行优先级比较。如果运算符栈顶运算符的优先级大于当前运算符则把栈顶运算符存入到 A ，把当前运算符存入到 B 中；如果运算符栈顶元素的优先级小于当前元算符，则直接把当前运算符存入到 B 中。 ​ 2.3 检查 B 栈 ， 如果还有元素存在则都存入 A 中。 ​ 3 最终得到 A 栈中的结果就是用后缀表达式的方式所表示的字符串。 举例：中缀表达式为 6-5x4 1 把6放入栈 A 中。 2 把减号放入栈 B 中。 3 5放入栈 A 中。 4 乘号由于比 B 中的减号优先级高则直接放入栈 B 中。（此时是运算符栈顶元素减号优先级小于当前元素乘号的情况）。 5 把4放入栈中 此时两个栈的情况是： A ：654； B：-X ； 6 最后把 B 中的元素弹出依次放入 A 中，最终得到的后缀表达式为 654x- 举例：中缀表达式为6x5-4 1 存入6到 A 栈中。 2 把乘号放入运算符栈 B 3 5存入栈 A 中。 4 减号是当前元素由于元算符 B 栈顶元素是乘号优先级高于减号，所以弹出 B 栈的栈顶元素即乘号放入 A 中，然后把当前元素 减号 再放入 B 中。此时两个栈的情况为： A：65x ； B：- ； 5 把4放入 A 中。 6 把 B 中所有的元素（若有）放入 A 中，即把减号放入 A 中。最终得到的后缀表达式为 65X4- 计算后缀表达式 从左至右依次读取由后缀表达式表示的字符串 1 如果读到当前字符是数字或者点号则存入栈中。 2 如果读到运算符则把栈顶的两个元素弹出来然后用该运算符对其计算，所得到的结果再存入栈中。 以上就是整个计算器实现的关键思路了，详细的代码可以去项目查看。如果你有什么问题可以在项目中 讨论 中交流。 对了对了，最后如果你也喜爱二次元或者喜爱翻唱欢迎来加微博，在博客的左边。","raw":"---\ntitle: 做一个Android计算器\ndate: 2016-12-11 19:31:43\ntags: Android\ncategories: Android\n---\n\n## 知识点清单\n\n- TableLayout 相关知识\n- AnimationSet 相关知识（简单的动画效果实现）\n- 可选 [butterknife](https://github.com/JakeWharton/butterknife)（声明 View 控件的另一种方式）\n\n## 核心思路\n\n通过  `后缀表达式`  来计算输入的算式，是本程序逻辑的重点。\n\n先来解释一下为什么做一个计算器会用到  `后缀表达式` 。我们人脑在处理算式的时候是按照  `中缀表达式`  的方式来处理的。比如：6 - 4  ，我们大脑处理这个算式的顺序很自然的就是6减去4最后得到结果。如果更复杂一些的算式如：6 - 4 x 3 ，我们第一反应是根据运算符的优先级别决定先运算4 x 3 然后再用6减去之前得到的结果。\n\n**综上所述，我们人脑在计算算式的时候其实是按照  `中缀表达式` 的顺序来计算的。**但是如果我们程序采用这种方式来计算算式编写的逻辑会十分的麻烦，所以这里我们就提出来  `后缀表达式`  来方便程序逻辑的编写，同时也是方便计算机处理。所以在编写的逻辑中我们有着关键一步就是把 `中缀表达式`  转换成为 `后缀表达式` 。\n\n好了，我们来从全局整理一下我们编写计算器的逻辑。\n\n1  得到用户输入的算式（此算式为中缀表达式所表示）。\n\n2  将此中缀表达式转化成后缀表达式。\n\n3  计算转化得到的后缀表达式得出算式结果。 \n\n## 实现步骤\n\n[项目地址](https://coding.net/u/jammic/p/JCalculator/git)\n\n这里只讨论关键思路，详细的代码请查看项目地址中的代码。\n\n- **获得用户输入的具体过程**\n\n  *按照中缀表达式（即从左到右的顺序把 String 存到栈中）*\n\n  1  用 `num` 作为一个存放数字或者点号的临时变量。\n\n  2  判断当前要存入栈的字符是 运算符 还是 数字或者点号。\n\n  3  交替的存入 `num`  和 运算符。\n\n  ps：`需要注意的一种情况是。用户输入进来的字符串的第一个字符是 运算符，若为此种情况应当在该字符串的首位添加一个0保证后续计算的正确性！（若没有添加0，在使用后缀表达式计算的时候会由于缺少一个运算数报错）。`\n\n  > 举例：用户此时的输入是  -6-2 ， 按照后缀表达式的规则先把该式子写成后缀表达式为 6-2- ，然后按照后缀表达式的计算规则，当读到运算符（第一个减号）的时候，弹出前面入栈的两个元素进行计算，但此时在减号前面入栈的只有6这一个元素无法计算，因此报错。\n\n- **把中缀表达式转变成后缀表达式（重点讨论）**\n\n   1  建立两个栈， 一个是存放转化成为后缀表达式的栈 A，一个是存放运算符的栈 B。\n\n   2  首先根据上一步，我们已经保证了得到的输入字符串的首位肯定是一个数字。开始进行转化逻辑如下：\n\n  ​\t*从左向右依次读取字符串*\n\n  ​     2.1  如果是数字或者点号存入到 A  \n\n  ​     2.2  如果是运算符，一 当 B 栈为空则直接放入 B； 二  B 栈不为空把该栈顶元素与当前得到的元算符进行优先级比较。如果运算符栈顶运算符的优先级大于当前运算符则把栈顶运算符存入到  A  ，把当前运算符存入到 B 中；如果运算符栈顶元素的优先级小于当前元算符，则直接把当前运算符存入到 B 中。\n\n  ​     2.3  检查 B 栈 ， 如果还有元素存在则都存入  A  中。\n\n​         3  最终得到  A 栈中的结果就是用后缀表达式的方式所表示的字符串。\n\n> 举例：中缀表达式为 6-5x4\n>\n> 1  把6放入栈 A 中。\n>\n> 2  把减号放入栈 B 中。\n>\n> 3  5放入栈  A  中。\n>\n> 4   乘号由于比  B  中的减号优先级高则直接放入栈 B 中。（此时是运算符栈顶元素减号优先级小于当前元素乘号的情况）。\n>\n> 5  把4放入栈中\n>\n> 此时两个栈的情况是： A ：654；  B：-X  ；\n>\n> 6  最后把 B 中的元素弹出依次放入 A 中，最终得到的后缀表达式为 654x-\n\n<br>\n\n> 举例：中缀表达式为6x5-4\n>\n> 1 存入6到 A 栈中。\n>\n> 2  把乘号放入运算符栈 B\n>\n> 3  5存入栈 A 中。\n>\n> 4  减号是当前元素由于元算符 B 栈顶元素是乘号优先级高于减号，所以弹出 B 栈的栈顶元素即乘号放入 A 中，然后把当前元素 减号 再放入 B 中。此时两个栈的情况为： A：65x ； B：-  ；\n>\n> 5  把4放入 A  中。\n>\n> 6  把 B 中所有的元素（若有）放入 A 中，即把减号放入 A 中。最终得到的后缀表达式为 65X4-\n\n- **计算后缀表达式**\n\n  *从左至右依次读取由后缀表达式表示的字符串*\n\n  1  如果读到当前字符是数字或者点号则存入栈中。\n\n  2  如果读到运算符则把栈顶的两个元素弹出来然后用该运算符对其计算，所得到的结果再存入栈中。\n\n---\n\n以上就是整个计算器实现的关键思路了，详细的代码可以去[项目](https://coding.net/u/jammic/p/JCalculator/git)查看。如果你有什么问题可以在项目中 `讨论`  中交流。\n\n对了对了，最后如果你也喜爱二次元或者喜爱翻唱欢迎来加微博，在博客的左边。\n\n\n\n\n","content":"<h2 id=\"知识点清单\"><a href=\"#知识点清单\" class=\"headerlink\" title=\"知识点清单\"></a>知识点清单</h2><ul>\n<li>TableLayout 相关知识</li>\n<li>AnimationSet 相关知识（简单的动画效果实现）</li>\n<li>可选 <a href=\"https://github.com/JakeWharton/butterknife\" target=\"_blank\" rel=\"external\">butterknife</a>（声明 View 控件的另一种方式）</li>\n</ul>\n<h2 id=\"核心思路\"><a href=\"#核心思路\" class=\"headerlink\" title=\"核心思路\"></a>核心思路</h2><p>通过  <code>后缀表达式</code>  来计算输入的算式，是本程序逻辑的重点。</p>\n<p>先来解释一下为什么做一个计算器会用到  <code>后缀表达式</code> 。我们人脑在处理算式的时候是按照  <code>中缀表达式</code>  的方式来处理的。比如：6 - 4  ，我们大脑处理这个算式的顺序很自然的就是6减去4最后得到结果。如果更复杂一些的算式如：6 - 4 x 3 ，我们第一反应是根据运算符的优先级别决定先运算4 x 3 然后再用6减去之前得到的结果。</p>\n<p><strong>综上所述，我们人脑在计算算式的时候其实是按照  <code>中缀表达式</code> 的顺序来计算的。</strong>但是如果我们程序采用这种方式来计算算式编写的逻辑会十分的麻烦，所以这里我们就提出来  <code>后缀表达式</code>  来方便程序逻辑的编写，同时也是方便计算机处理。所以在编写的逻辑中我们有着关键一步就是把 <code>中缀表达式</code>  转换成为 <code>后缀表达式</code> 。</p>\n<p>好了，我们来从全局整理一下我们编写计算器的逻辑。</p>\n<p>1  得到用户输入的算式（此算式为中缀表达式所表示）。</p>\n<p>2  将此中缀表达式转化成后缀表达式。</p>\n<p>3  计算转化得到的后缀表达式得出算式结果。 </p>\n<h2 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h2><p><a href=\"https://coding.net/u/jammic/p/JCalculator/git\" target=\"_blank\" rel=\"external\">项目地址</a></p>\n<p>这里只讨论关键思路，详细的代码请查看项目地址中的代码。</p>\n<ul>\n<li><p><strong>获得用户输入的具体过程</strong></p>\n<p><em>按照中缀表达式（即从左到右的顺序把 String 存到栈中）</em></p>\n<p>1  用 <code>num</code> 作为一个存放数字或者点号的临时变量。</p>\n<p>2  判断当前要存入栈的字符是 运算符 还是 数字或者点号。</p>\n<p>3  交替的存入 <code>num</code>  和 运算符。</p>\n<p>ps：<code>需要注意的一种情况是。用户输入进来的字符串的第一个字符是 运算符，若为此种情况应当在该字符串的首位添加一个0保证后续计算的正确性！（若没有添加0，在使用后缀表达式计算的时候会由于缺少一个运算数报错）。</code></p>\n<blockquote>\n<p>举例：用户此时的输入是  -6-2 ， 按照后缀表达式的规则先把该式子写成后缀表达式为 6-2- ，然后按照后缀表达式的计算规则，当读到运算符（第一个减号）的时候，弹出前面入栈的两个元素进行计算，但此时在减号前面入栈的只有6这一个元素无法计算，因此报错。</p>\n</blockquote>\n</li>\n<li><p><strong>把中缀表达式转变成后缀表达式（重点讨论）</strong></p>\n<p> 1  建立两个栈， 一个是存放转化成为后缀表达式的栈 A，一个是存放运算符的栈 B。</p>\n<p> 2  首先根据上一步，我们已经保证了得到的输入字符串的首位肯定是一个数字。开始进行转化逻辑如下：</p>\n<p>​    <em>从左向右依次读取字符串</em></p>\n<p>​     2.1  如果是数字或者点号存入到 A  </p>\n<p>​     2.2  如果是运算符，一 当 B 栈为空则直接放入 B； 二  B 栈不为空把该栈顶元素与当前得到的元算符进行优先级比较。如果运算符栈顶运算符的优先级大于当前运算符则把栈顶运算符存入到  A  ，把当前运算符存入到 B 中；如果运算符栈顶元素的优先级小于当前元算符，则直接把当前运算符存入到 B 中。</p>\n<p>​     2.3  检查 B 栈 ， 如果还有元素存在则都存入  A  中。</p>\n</li>\n</ul>\n<p>​         3  最终得到  A 栈中的结果就是用后缀表达式的方式所表示的字符串。</p>\n<blockquote>\n<p>举例：中缀表达式为 6-5x4</p>\n<p>1  把6放入栈 A 中。</p>\n<p>2  把减号放入栈 B 中。</p>\n<p>3  5放入栈  A  中。</p>\n<p>4   乘号由于比  B  中的减号优先级高则直接放入栈 B 中。（此时是运算符栈顶元素减号优先级小于当前元素乘号的情况）。</p>\n<p>5  把4放入栈中</p>\n<p>此时两个栈的情况是： A ：654；  B：-X  ；</p>\n<p>6  最后把 B 中的元素弹出依次放入 A 中，最终得到的后缀表达式为 654x-</p>\n</blockquote>\n<p><br></p>\n<blockquote>\n<p>举例：中缀表达式为6x5-4</p>\n<p>1 存入6到 A 栈中。</p>\n<p>2  把乘号放入运算符栈 B</p>\n<p>3  5存入栈 A 中。</p>\n<p>4  减号是当前元素由于元算符 B 栈顶元素是乘号优先级高于减号，所以弹出 B 栈的栈顶元素即乘号放入 A 中，然后把当前元素 减号 再放入 B 中。此时两个栈的情况为： A：65x ； B：-  ；</p>\n<p>5  把4放入 A  中。</p>\n<p>6  把 B 中所有的元素（若有）放入 A 中，即把减号放入 A 中。最终得到的后缀表达式为 65X4-</p>\n</blockquote>\n<ul>\n<li><p><strong>计算后缀表达式</strong></p>\n<p><em>从左至右依次读取由后缀表达式表示的字符串</em></p>\n<p>1  如果读到当前字符是数字或者点号则存入栈中。</p>\n<p>2  如果读到运算符则把栈顶的两个元素弹出来然后用该运算符对其计算，所得到的结果再存入栈中。</p>\n</li>\n</ul>\n<hr>\n<p>以上就是整个计算器实现的关键思路了，详细的代码可以去<a href=\"https://coding.net/u/jammic/p/JCalculator/git\" target=\"_blank\" rel=\"external\">项目</a>查看。如果你有什么问题可以在项目中 <code>讨论</code>  中交流。</p>\n<p>对了对了，最后如果你也喜爱二次元或者喜爱翻唱欢迎来加微博，在博客的左边。</p>\n","slug":"做一个Android计算器，我学到了什么","updated":"2016-12-13T06:54:35.199Z","comments":true,"link":"","permalink":"https://jngoogle.github.io/2016/12/11/做一个Android计算器，我学到了什么/","excerpt":"","categories":[{"name":"Android","slug":"Android","permalink":"https://jngoogle.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://jngoogle.github.io/tags/Android/"}]},{"title":"Hello World","date":"2016-12-09T10:18:11.602Z","path":"2016/12/09/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","slug":"hello-world","updated":"2016-12-09T10:18:11.603Z","comments":true,"link":"","permalink":"https://jngoogle.github.io/2016/12/09/hello-world/","excerpt":"","categories":[],"tags":[]}]}